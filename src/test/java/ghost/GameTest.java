/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.lang.RuntimeException;
import processing.event.KeyEvent;

class GameTest{  
    @Test
    public void constructorTest(){
        Game game = new Game(null, "testConf.json");
    }
    /*

        Test readConfiguration file method

     */
    @Test
    public void readConfigurationTest(){

    	Game game = new Game(null, "testConf.json");
    	game.readConfiguration("testConf.json");
    	assertEquals(10,game.lives);
    	assertEquals(2,game.speed);
    	assertEquals("testMap.txt", game.map_file);

    }
    /*

        All game logic will test here!

     */
    @Test
    public void allGameLogicTest(){

        Game game = new Game(null, "testConf.json");

        //test countdown logic
    	assertEquals(game.bigNumber3,game.countdownSprite);//check whether countdown sprite is correct 
        game.tick(); 
  		game.countdown = 0;

  		game.stop();
        game.tick();
    	assertEquals(game.empty,game.countdownSprite);//check whether countdown sprite is correct 

        game.countdown = 20;
        game.tick();
    	assertEquals(game.bigNumber1,game.countdownSprite);//check whether countdown sprite is correct 

        game.countdown = 1 ;
       	game.tick();
    	assertEquals(game.bigNumber1,game.countdownSprite); //check whether countdown sprite is correct 


        //test playerlife logic
        game.player1.livesLeft = 0;
        game.tick();
    	assertEquals(10,game.player1.livesLeft); //check whether lives reset

        //test reset fruit reset after each stage

        //game.game_map.remaining_fruit = 0;
        //game.tick();
    	//assertEquals(24,game.game_map.remaining_fruit);  //check whether fruit reset


        //test weather game is reset when ghoost location match player location
        game.player1.i_coordinate = 100;
        game.player1.j_coordinate = 100;
        game.ghosts.get(8).i_coordinate =100;
        game.ghosts.get(8).j_coordinate =100;
        game.tick(); 
        assertEquals(380,game.ghosts.get(8).i_coordinate); // check whether ghost coordinate is reset

        //test wether ghost change mode when ghostModeLength counter = element of modeLength (frame)

        game.ghostModeCounter = 420;
        game.tick();
        assertEquals(0,game.ghostModeCounter); //check whether ghostmodeCounter reset

        game.modeLength_index = 2;
        game.ghostModeCounter = 420;
        game.isPause = true;
        game.tick();
        assertEquals(0,game.ghostModeCounter); //check whether ghostmodeCounter reset


        game.isPause = false;
        game.modeLength_index = 7;
        game.ghostModeCounter = 60000;
        game.tick();
        assertEquals(0,game.ghostModeCounter); //check whether ghostmodeCounter reset
        assertEquals(0,game.modeLength_index); // check whether modeLength change to 0

        game.ghosts.get(0).mode = GhostMode.FRIGHTENED;
        game.tick();

        //test when player location is the same as fruit, fruit will disappear

        game.game_map.allFruits.get(0).i_waka_path = 50;
        game.game_map.allFruits.get(0).j_waka_path = 50;
        game.player1.i_coordinate = 50;
        game.player1.j_coordinate = 50;
        assertEquals(0,game.currentScore); //check score before tick()

        game.tick(); // test not yet collect
        assertEquals(1,game.currentScore);  //check score after tick()
        game.tick(); // test collected
        assertEquals(1,game.currentScore); //check score after second tick()

        game.game_map.allBerrys.get(0).i_waka_path = 60;
        game.game_map.allBerrys.get(0).j_waka_path = 60;
        game.player1.i_coordinate = 60;
        game.player1.j_coordinate = 60;
        assertEquals(0,game.player1.berryLeft); //check berry amount before tick()

        game.tick(); // test not yet collect
        assertEquals(1,game.player1.berryLeft); //check berry amount after tick()

        game.tick(); // test collected
        assertEquals(1,game.player1.berryLeft); //check berry amount after second tick()

        game.game_map.allSuperFruits.get(0).i_waka_path = 70;
        game.game_map.allSuperFruits.get(0).j_waka_path = 70;
        game.player1.i_coordinate = 70;
        game.player1.j_coordinate = 70;
        game.tick(); // test collected super fruit
        assertEquals(300,game.ghosts.get(0).frightened_duration); // check that ghost enter ghost mode
        game.tick();

        game.ghosts.get(0).i_coordinate = 80;
        game.ghosts.get(0).j_coordinate = 80;
        game.player1.i_coordinate =80;
        game.player1.j_coordinate = 80;
        game.tick();
        game.ghosts.get(0).mode = GhostMode.CHASE; 
        game.ghosts.get(0).isAlive = false;

        game.tick();
        game.ghosts.get(0).mode = GhostMode.FROZEN;
        game.tick();

        game.reset(false);

      	game.countdown =0;
        game.player1.current = Direction.RIGHT;
        game.tick();
        assertEquals(206,game.player1.i_coordinate); //check for player coordinate after tick()
        game.player1.current = Direction.LEFT;
        game.tick();
        assertEquals(204,game.player1.i_coordinate);  //check for player coordinate after tick()
        game.player1.current = Direction.UP;
        game.tick();
        assertEquals(409,game.player1.j_coordinate);  //check for player coordinate after tick()

        game.player1.current = Direction.DOWN;
        game.tick();
        assertEquals(411,game.player1.j_coordinate);  //check for player coordinate after tick()


        game.reset(false);

      	game.countdown =0;
        game.player1.next = Direction.RIGHT;
        game.tick();
        assertEquals(206,game.player1.i_coordinate); //check for player coordinate after tick()
        game.player1.next = Direction.LEFT;
        game.tick();
        assertEquals(204,game.player1.i_coordinate);  //check for player coordinate after tick()
        game.player1.next = Direction.UP;
        game.tick();
        assertEquals(409,game.player1.j_coordinate);  //check for player coordinate after tick()
        game.player1.next = Direction.DOWN;
        game.tick();
        assertEquals(411,game.player1.j_coordinate);  //check for player coordinate after tick()
        game.reset(false);

      	game.countdown =0;
      	game.player1.i_coordinate++;
        game.player1.next = Direction.UP;
        game.tick();
        assertEquals(203,game.player1.i_coordinate); //check for player coordinate after tick()
        game.player1.next = Direction.DOWN;
        game.tick();
        assertEquals(201,game.player1.i_coordinate); //check for player coordinate after tick()
        game.reset(false);
      	game.countdown =0;
      	game.player1.j_coordinate++;
        game.player1.next = Direction.RIGHT;
        game.tick();
        assertEquals(412,game.player1.j_coordinate); //check for player coordinate after tick()
        game.player1.next = Direction.LEFT;
        game.tick();
        assertEquals(412,game.player1.j_coordinate); //check for player coordinate after tick()
        
        // test stageReset(true) with new highscore
        game.highScore =20;
        game.currentScore= 30;
        game.stageReset(true);
        game.tick();

        assertEquals(30,game.highScore); //check whether highscore is update
        game.game_map.remaining_fruit = 0;
        game.tick();

    }


   	@Test
   	public void pauseTest(){

        Game game = new Game(null, "testConf.json");

        assertFalse(game.isPause);  //check pause before call function
        game.toPause();
        assertTrue(game.isPause); //check pause after call function

   	}

   	@Test
   	public void continueTest(){

        Game game = new Game(null, "testConf.json");
        game.toPause();
        assertTrue(game.isPause); //check pause before call function
        game.toContinue();
        assertFalse(game.isPause);  //check pause after call function
   	}

   	@Test
   	public void tickCoundownTest(){

        Game game = new Game(null, "testConf.json");
        game.countdown =20;
        game.tickCountdown();
        assertEquals(game.bigNumber1, game.countdownSprite);  //Check whether coundown sprite is match
        game.countdown = 70;
        game.tickCountdown();
        assertEquals(game.bigNumber2, game.countdownSprite);  //Check whether coundown sprite is match
        game.countdown =130;
        game.tickCountdown();
        assertEquals(game.bigNumber3, game.countdownSprite);   //Check whether coundown sprite is match
   	}
    @Test
    public void keyTest(){
        Game game = new Game(null, "testConf.json");
        //Game in countdown stage
        game.keyHandler(80); // pasue

        game.keyHandler(38);  //up
        game.keyHandler(87);

        game.keyHandler(40);  //down
        game.keyHandler(83);

        game.keyHandler(37);  //left
        game.keyHandler(65);

        game.keyHandler(39);  //right
        game.keyHandler(68);

        game.keyHandler(32);  //pause

        game.keyHandler(70);  //berry

        game.countdown =0;
        //Game start
        game.keyHandler(38);  //up
        game.keyHandler(87);

        game.keyHandler(40);  //down
        game.keyHandler(83);

        game.keyHandler(37);  //left
        game.keyHandler(65);

        game.keyHandler(39);  //right
        game.keyHandler(68);


        game.keyHandler(70);  //berry

        game.keyHandler(32);  //debug

        //Game is Pasue
        game.keyHandler(80);  //berry

        game.keyHandler(38);  //up
        game.keyHandler(87);

        game.keyHandler(40);  //down
        game.keyHandler(83);

        game.keyHandler(37);  //left
        game.keyHandler(65);

        game.keyHandler(39);  //right
        game.keyHandler(68);


        game.keyHandler(70);  //berry

        game.keyHandler(80);  //pause

        game.player1.berryLeft = 2;
        game.keyHandler(70);
        game.keyHandler(80);
        game.keyHandler(70);
        game.keyHandler(99);
        game.countdown =0;
        game.keyHandler(80);
        game.countdown =10;
        game.keyHandler(70);

    }
}
