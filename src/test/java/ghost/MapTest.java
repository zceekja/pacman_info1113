/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class MapTest {
    
    @Test 
    public void constructorTest() {
        Game testGame = new Game(null, "testConf.json");
        assertNotNull(new Map(testGame));    
    }
    @Test
    public void TestMap(){
        Game testGame = new Game(null, "testConf.json");
    	Map test = new Map(testGame);
        assertEquals(0,test.map[0][0]);         //test empyty '0'
        assertEquals(1,test.map[25][1]);        //test wall '1'
        assertEquals(2,test.map[26][0]);        //test wall '2'
        assertEquals(3,test.map[27][27]);       //test wall'3'
        assertEquals(4,test.map[27][0]);        //test wall '4'
        assertEquals(5,test.map[25][27]);       //test wall '5'
        assertEquals(6,test.map[25][0]);        //test wall '6'
        assertEquals(0,test.map[26][13]);        //test player 'p'
        assertEquals(0,test.map[26][26]);       //test ghost 'g'
        assertEquals(0,test.map[26][25]);       //test berry '8'
        assertEquals(7,test.map[26][2]);        //test fruit '7'
        assertEquals(0,test.map[0][27]);        //test invalid;


        assertTrue(test.movePath[411][50]);     //test random moveable path
        assertTrue(test.movePath[411][412]);    //test edge of moveable path
        assertFalse(test.movePath[0][0]);       //test 0,0
        assertFalse(test.movePath[411][413]);   //test edge of wall


    }
    @Test
    public void TestPlayerStartLocation(){
        Game testGame = new Game(null, "testConf.json");
        Map test = new Map(testGame);
        assertEquals(13,test.getPlayerIStartLocation()); //test player start coordinate i direction
        assertEquals(26,test.getPlayerJStartLocation()); //test player start coordinate j direction

    }
    @Test
    public void TestGhostStartLocation(){
        Game testGame = new Game(null, "testConf.json");
        Map test = new Map(testGame);
        assertEquals(24,test.getGhostIStartLocation(9)); //test ghost 5 start coordinate i
        assertEquals(26,test.getGhostJStartLocation(9)); //test ghost 5 start coordinate j
        assertEquals(26,test.getGhostIStartLocation(10)); //test ghost 6 start coordinate i
        assertEquals(26,test.getGhostJStartLocation(10)); //test ghost 6 start coordinate j
        assertEquals(0,test.getGhostJStartLocation(15));  //test invalid ghost
        assertEquals(0,test.getGhostIStartLocation(15));  //test invalid ghost

    }
    @Test
    public void TestFruits(){
        Game testGame = new Game(null, "testConf.json");
        Map test = new Map(testGame);
        assertEquals(24,test.getAllFruits().size()); //test correctness of getAllFruits
        assertEquals(26,test.total_fruit);           //test total amount of fruit
        assertEquals(26,test.remaining_fruit);       //test remaining fruit

    }
    @Test
    public void TestBerrys(){
        Game testGame = new Game(null, "testConf.json");
        Map test = new Map(testGame);
        assertEquals(1,test.getAllBerrys().size());  //test corrctnedd of getAllBerrys
        assertEquals(1,test.remaining_berry);        //test remaning berry
    }
}
